package com.transround.nativeradmin.util;

import com.intellij.openapi.ui.Messages;

import java.io.*;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by szeibert on 2014.12.02..
 */
public class GradleUtils extends CommonUtils {

    private static List<File> gradleBuildFiles;

    public static List<File> getGradleBuildFiles() {
        if (gradleBuildFiles == null || gradleBuildFiles.isEmpty()) {
            gradleBuildFiles = new ArrayList<File>();
            findGradleBuildFiles(new File(project.getBaseDir().getPath()));
        }
        return gradleBuildFiles;
    }

    private static void findGradleBuildFiles(File folder) {
        for (File f : folder.listFiles()) {
            if (f.getName().equals("build.gradle") && !gradleBuildFiles.contains(f)) {
                gradleBuildFiles.add(f);
            }
            if (isNonBuildDirectory(f)) {
                findGradleBuildFiles(f);
            }
        }
    }

    public static void reset() {
        gradleBuildFiles = null;
    }

    public static void makeChangesToGradleBuildFiles() {
        for (File gradleBuildFile : getGradleBuildFiles()) {
            List<ContentPartial> contentPartials = new ArrayList<ContentPartial>();
            String gradleBuildFileContent = readContentFromFile(gradleBuildFile);

            Pattern pattern = Pattern.compile("android\\s*\\{");
            Matcher matcher = pattern.matcher(gradleBuildFileContent);
            boolean androidBuildFile = matcher.find();

            // searches for buildscript node, adds AspectJ compiler if necessary
            pattern = Pattern.compile("buildscript\\s*\\{\\s*");
            matcher = pattern.matcher(gradleBuildFileContent);
            if (matcher.find() && !gradleBuildFileContent.contains("aspectjVersion")) {
                StringBuilder contentPartialBuilder = new StringBuilder();
                contentPartialBuilder.append("// AspectJ version definition. Generated by Nativer Admin for Android Studio.\n");
                contentPartialBuilder.append("    ext {\n");
                contentPartialBuilder.append("        aspectjVersion = '1.8.2'\n");
                contentPartialBuilder.append("    }\n    ");
                contentPartials.add(new ContentPartial(matcher.end(), contentPartialBuilder.toString()));
            }

            // searches for buildscript.repositories node, adds AspectDroid's repository if necessary
            pattern = Pattern.compile("buildscript\\s*\\{[\\s\\S]*?repositories\\s*\\{([\\s\\S]*?)maven\\s*\\{[^\\}]*");
            matcher = pattern.matcher(gradleBuildFileContent);
            if (matcher.find() && !gradleBuildFileContent.contains(Constants.aspectDroidRepository)) {
                StringBuilder contentPartialBuilder = new StringBuilder();
                contentPartialBuilder.append("        // Transround repository. Generated by Nativer Admin for Android Studio.\n");
                contentPartialBuilder.append("        maven {\n");
                contentPartialBuilder.append(String.format("            url \"%1$s\"\n", Constants.aspectDroidRepository));
                contentPartialBuilder.append("        }\n        ");
                contentPartials.add(new ContentPartial(matcher.end(1), contentPartialBuilder.toString()));
            } else {
                pattern = Pattern.compile("buildscript\\s*\\{[\\s\\S]*?repositories\\s*\\{([^\\}]*)");
                matcher = pattern.matcher(gradleBuildFileContent);
                if (matcher.find() && !gradleBuildFileContent.contains(Constants.aspectDroidRepository)) {
                    StringBuilder contentPartialBuilder = new StringBuilder();
                    contentPartialBuilder.append("    // Transround repository. Generated by Nativer Admin for Android Studio.\n");
                    contentPartialBuilder.append("        maven {\n");
                    contentPartialBuilder.append(String.format("            url \"%1$s\"\n", Constants.aspectDroidRepository));
                    contentPartialBuilder.append("        }\n    ");
                    contentPartials.add(new ContentPartial(matcher.end(1), contentPartialBuilder.toString()));
                }
            }

            // searches for buildscript.dependencies node, adds AspectDroid if necessary
            pattern = Pattern.compile("buildscript\\s*\\{[\\s\\S]*?dependencies\\s*\\{([^\\}]*)");
            matcher = pattern.matcher(gradleBuildFileContent);
            if (matcher.find() && !gradleBuildFileContent.contains("com.transround:aspectdroid")) {
                StringBuilder contentPartialBuilder = new StringBuilder();
                contentPartialBuilder.append("    // AspectDroid needs to be here in order to work. Generated by Nativer Admin for Android Studio.\n");
                contentPartialBuilder.append("        classpath 'com.transround:aspectdroid:1.0.+'\n    ");
                contentPartials.add(new ContentPartial(matcher.end(1), contentPartialBuilder.toString()));
            }

            // searches for allprojects.repositories node, adds Transround repository if necessary
            StringBuilder pluginRepoContentPartialBuilder = new StringBuilder();
            pluginRepoContentPartialBuilder.append("        // Transround repository. Generated by Nativer Admin for Android Studio.\n");
            pluginRepoContentPartialBuilder.append("        maven {\n");
            pluginRepoContentPartialBuilder.append(String.format("            url \"%1$s\"\n", Constants.pluginRepositoryURL));
            pluginRepoContentPartialBuilder.append("        }\n    ");

            pattern = Pattern.compile("allprojects\\s*\\{[\\s\\S]*?repositories\\s*\\{([\\s\\S]*?)maven\\s*\\{[^\\}]*");
            matcher = pattern.matcher(gradleBuildFileContent);
            if (matcher.find() && !gradleBuildFileContent.contains(Constants.pluginRepositoryURL)) {
                contentPartials.add(new ContentPartial(matcher.end(1), pluginRepoContentPartialBuilder.toString()));
            } else {
                pattern = Pattern.compile("allprojects\\s*\\{[\\s\\S]*?repositories\\s*\\{([^\\}]*)");
                matcher = pattern.matcher(gradleBuildFileContent);
                if (matcher.find() && !gradleBuildFileContent.contains(Constants.pluginRepositoryURL)) {
                    contentPartials.add(new ContentPartial(matcher.end(1), pluginRepoContentPartialBuilder.toString()));
                } else {
                    // if allprojects.repositories was not found then check if the script has a seperate repositories node after a buildscript.repositories node
                    pluginRepoContentPartialBuilder = new StringBuilder();
                    pluginRepoContentPartialBuilder.append("    // Transround repository. Generated by Nativer Admin for Android Studio.\n");
                    pluginRepoContentPartialBuilder.append("    maven {\n");
                    pluginRepoContentPartialBuilder.append(String.format("        url \"%1$s\"\n", Constants.pluginRepositoryURL));
                    pluginRepoContentPartialBuilder.append("    }\n    ");

                    pattern = Pattern.compile("buildscript\\s*\\{[\\s\\S]*?repositories\\s*\\{[\\s\\S]*?repositories\\s*\\{([\\s\\S]*?)maven\\s*\\{[^\\}]*");
                    matcher = pattern.matcher(gradleBuildFileContent);
                    if (matcher.find() && !gradleBuildFileContent.contains(Constants.pluginRepositoryURL)) {
                        contentPartials.add(new ContentPartial(matcher.end(1), pluginRepoContentPartialBuilder.toString()));
                    } else {
                        pattern = Pattern.compile("buildscript\\s*\\{[\\s\\S]*?repositories\\s*\\{[\\s\\S]*?repositories([^\\}]*)");
                        matcher = pattern.matcher(gradleBuildFileContent);
                        if (matcher.find() && !gradleBuildFileContent.contains(Constants.pluginRepositoryURL)) {
                            contentPartials.add(new ContentPartial(matcher.end(1), pluginRepoContentPartialBuilder.toString()));
                        }
                    }
                }
            }

            // searches for compile dependency definitions, adds nativer-sdk if necessary
            pattern = Pattern.compile("dependencies\\s*\\{[\\s\\S]*?compile\\s+([^\\}]*)");
            matcher = pattern.matcher(gradleBuildFileContent);
            if (matcher.find() && !gradleBuildFileContent.contains("com.transround:nativer-sdk")) {
                StringBuilder contentPartialBuilder = new StringBuilder();
                contentPartialBuilder.append("    // Nativer SDK makes your app translatable. Generated by Nativer Admin for Android Studio\n");
                contentPartialBuilder.append(String.format("    compile '%1$s'\n", Constants.pluginName));
                contentPartials.add(new ContentPartial(matcher.end(1), contentPartialBuilder.toString()));
            } else if(androidBuildFile) {
                // if there was no compile dependency definition node but it's an Android build file then add the whole node
                pattern = Pattern.compile("android\\s*\\{");
                matcher = pattern.matcher(gradleBuildFileContent);
                if (matcher.find() && !gradleBuildFileContent.contains("com.transround:nativer-sdk")) {
                    StringBuilder contentPartialBuilder = new StringBuilder();
                    contentPartialBuilder.append("// Nativer SDK makes your app translatable. Generated by Nativer Admin for Android Studio\n");
                    contentPartialBuilder.append("dependencies {\n");
                    contentPartialBuilder.append(String.format("    compile '%1$s'\n", Constants.pluginName));
                    contentPartialBuilder.append("}\n\n");
                    contentPartials.add(new ContentPartial(matcher.start(), contentPartialBuilder.toString()));
                }
            }

            // search for apply plugin definitions, adds aspectdroid if necessary
            pattern = Pattern.compile("apply\\splugin:\\s'com.android.application'");
            matcher = pattern.matcher(gradleBuildFileContent);
            if (matcher.find() && !gradleBuildFileContent.contains("'aspectdroid'")) {
                StringBuilder contentPartialBuilder = new StringBuilder();
                contentPartialBuilder.append("\n// AspectDroid uses AspectJ compiler instead of Java compiler. Generated by Nativer Admin for Android Studio.\n");
                contentPartialBuilder.append("apply plugin: 'aspectdroid'");
                contentPartials.add(new ContentPartial(matcher.end(), contentPartialBuilder.toString()));
            }

            Collections.sort(contentPartials); // sort content partials by their positions in the build file
            StringBuilder modifiedGradleBuildFileContent = new StringBuilder();
            int startPosition = 0;
            int endPosition;
            for (ContentPartial contentPartial : contentPartials) {
                endPosition = contentPartial.getPositionInContent();
                modifiedGradleBuildFileContent.append(gradleBuildFileContent.substring(startPosition, endPosition));
                modifiedGradleBuildFileContent.append(contentPartial.getContentString());
                startPosition = endPosition;
            }
            modifiedGradleBuildFileContent.append(gradleBuildFileContent.substring(startPosition, gradleBuildFileContent.length()));
            backupFile(gradleBuildFile);
            try {
                writeContentToFile(modifiedGradleBuildFileContent.toString(), gradleBuildFile);
            } catch (IOException e) {

            }
        }

        project.getBaseDir().refresh(false, true);
    }

    private static class ContentPartial implements Comparable<ContentPartial> {
        Integer positionInContent;
        String contentString;

        public ContentPartial(Integer positionInContent, String contentString) {
            this.positionInContent = positionInContent;
            this.contentString = contentString;
        }

        public Integer getPositionInContent() {
            return positionInContent;
        }

        public void setPositionInContent(Integer positionInContent) {
            this.positionInContent = positionInContent;
        }

        public String getContentString() {
            return contentString;
        }

        public void setContentString(String contentString) {
            this.contentString = contentString;
        }

        @Override
        public int compareTo(ContentPartial o) {
            return positionInContent.compareTo(o.getPositionInContent());
        }
    }
}
